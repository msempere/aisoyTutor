#include "opsBarragame.h"

OpsBarraGame::OpsBarraGame()
{
  SetName("Juego de operaciones con barra divisioria");
  bot.say("Vamos a operar con puntos.");
}

OpsBarraGame::~OpsBarraGame()
{

}


int OpsBarraGame::EscucharRespuesta()
{
    bot.setGrammarFile("./numbers.bnf");
    AISoy1::Sentence sentence=bot.listen();

    char *tmp=strdupa(sentence.sentence().c_str());
    DeleteChar(tmp,'D');

    return Chartoint(tmp);
}


void OpsBarraGame::Run()
{
  Mouth m;
  
  int operando1=GetRandom(0,10);
  int operando2=GetRandom(0,10);
  int parpadeos=5;
  bool fallo=false;
  
  cout<<"Tenemos op1="<<operando1<<" y op2="<<operando2<<endl;
  
  while (!fallo) {

	operando1=GetRandom(0,10);
	operando2=GetRandom(0,10);
    
    
        for (int i=0;i<parpadeos;i++) {

            m.TurnOnRandomLeds(0,0,9,2,operando1);
            m.TurnOnRandomLeds(0,4,9,6,operando2);

            m.CreateBar();
            bot.mouthDraw(m.Get());
            sleep(3);
            m.Clear();
        }

        bot.mouthDraw(m.Get());

        int solucionUsuario=EscucharRespuesta();
        cout<<"Escuchado: "<<solucionUsuario<<endl;
        int solucionCorrecta=operando1+operando2;
        cout<<"Solucion: "<<solucionCorrecta<<endl;

        if (solucionCorrecta==solucionUsuario) {
            bot.say("bien");
            YesWithHead();
        }
        else {
            bot.say("mal");
            NoWithHead();
            fallo=true;
        }
    }
  
}

